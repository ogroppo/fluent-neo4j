var neo4j = require('neo4j-driver').v1;
var CypherQuery = require('./index')
var driver = neo4j.driver(process.env.NEO4J_URL, neo4j.auth.basic(process.env.NEO4J_USER, process.env.NEO4J_PASS));

// YOUR QUERY HERE
var query = new CypherQuery()
				.mergeNode()
				.returnNode();

console.log("Your query", query.queryString, query.queryParams)


var startTime = new Date();
const session = driver.session();
session
    .run(
      query.queryString,
      query.queryParams
    )
    .then(result => {
      var res = result.records.map((record)=>{
        let _record = {}
        record.forEach((value, key, record)=>{
          if(Array.isArray(value)){
            _record[key] = [];
            value.forEach(v => {
              _record[key].push(format(v))
            })
          }else{
            _record[key] = format(value)
          }
        })
        return _record;
      })

      console.log("Query time in ms", new Date() - startTime);
      console.log("Query result", res);
      session.close();
      process.exit();
    })
    .catch(error => {
      console.log(error)
      session.close();
      process.exit();
  });

process.on('exit', function () {
  driver.close();
  console.log("exiting")
});

function format(record){
  let _record = {}
  _record.id = record.identity.toNumber()
  if(record.labels && record.labels.length)
    _record.labels = record.labels
  if(record.type)
    _record.type = record.type
  if(record.start)
    _record.start = record.start.toNumber()
  if(record.end)
    _record.end = record.end.toNumber()
  if(record.segments)
    _record.segments = record.segments

  Object.keys(record.properties).forEach((key) => {
    if(typeof record.properties[key].toNumber === 'function'){
      _record[key] = record.properties[key].toNumber()
    }else{
      _record[key] = record.properties[key]
    }
  })

  return _record;
}